<!doctype html>
<html>

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Editor</title>
    <style>
      html {
            height: 100%;
            width: 100%;
        }
        body {
            font: 10px Helvetica, Arial;
            margin: 0;
            height: calc(100% - 50px);
            width: 100%;
        }
        #container {
            height: 90%;
            width: 100%;
        }

        #editor-container
        {
            height: calc(100% - 50px);
            width: 100%;
        }

        #toolbar {
            border-bottom: 1px solid #E8E8E8;
            background-color: #F5F5F5;
            min-height: 35px;
            max-height: 35px;
            height: 35px;
            padding: 4px;
        }
        #editor {
            background-color: #FFFFFF;
            height: calc(100% - 35px);
            width: 100%;
        }
        .qt-toolbar.qt-snow {
            padding: 4px;
        }

        #chat-panel {
            margin-bottom: 0;
            height: 50vh;
            max-height: 50vh;
            position: relative;
            margin: 0 !important;
            padding: 0 !important;
            border-color: #f5f5f5;
        }

        #chat-panel-body {
            overflow: auto;
            position: absolute;
            top: 0px;
            bottom: 55px;
            left: 0;
            right: 0;
            padding: 5px;
        }

        #chat-panel-footer {
            position: absolute;
            right: 0;
            bottom: 0;
            left: 0;
        }
    </style>

    <script src="/js/quill.js"></script>
    <link rel="stylesheet" href="/css/quill.snow.css">

    <script src="/js/jquery-3.2.1.min.js"></script>

    <script src="/js/jquery.validate.js"></script>
    <script src="/js/additional-methods.js"></script>

    <script src="/js/bootstrap.min.js"></script>
    <link rel="stylesheet" href="/css/bootstrap.min.css">

    <script src="/js/jasny-bootstrap.min.js"></script>
    <link rel="stylesheet" href="/css/jasny-bootstrap.min.css">

    <script src="/js/cryptojslib/rollups/aes.js"></script>
    <script src="/js/cryptojslib/rollups/pbkdf2.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.7.4/socket.io.js" 
        integrity="sha256-lDaoGuONbVHFEV6ZW3GowBu4ECOTjDE14hleNVBvDW8="
        crossorigin="anonymous"></script>
    
    <script src="/js/moment.js"></script>
    <script src="/js/bundle.js"></script>
    <script src="/js/knuth-shuffle/index.js"></script>
    <script src="/js/human-readable-ids/assets/animals.js"></script>
    <script src="/js/human-readable-ids/assets/adjectives.js"></script>
    <script src="/js/human-readable-ids/index.js"></script>
    
    <script src="/js/notify.js"></script>
    <script src="/js/sanitize-html.min.js"></script>
    
</head>

<body>
    <%- include('../partials/editor-header') %>

        <div class="container" id="editor-container">
            <div id="toolbar">
                <button id="debug-info-button" class="glyphicon glyphicon-eye-open" data-toggle="tooltip" data-placement="top" title="Debug Info"></button>
                <button id="info-button" class="glyphicon glyphicon-info-sign" data-toggle="tooltip" data-placement="top" title="Editor Info"></button>
                <button id="users-button" class="glyphicon glyphicon-cloud" data-toggle="tooltip" data-placement="top" title="Users"></button>
                <button id="chat-button" class="glyphicon glyphicon-user" data-toggle="tooltip" data-placement="top" title="Open Chat"></button>

                <select class="ql-size">
                    <option value="huge"></option>
                    <option value="large"></option>
                    <option selected></option>
                    <option value="small"></option>
                </select>
                <button class="ql-bold"></button>
                <button class="ql-italic"></button>
                <button class="ql-underline"></button>
            </div>
            <div id="editor"></div>

        </div>

        <div class="modal fade" id="settings-modal" tabindex="-1" role="dialog" data-backdrop="static" data-keyboard="false">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">Editor Room Settings</h4>
                    </div>
                    <div class="modal-body">
                        <p>
                        <% if (roomExists) { %>
                        This room already exists, so in the field below you will need to enter the previously set passcode to join the room.
                        <% } else { %>
                        You are creating a new room. In order to create a new room you will need to specify a passcode for the room. You will need to remember this passcode in order to join it from another editor or to share the room with others.
                        <% } %>
                        </p>
                        <br/>
                        
                        <% if (roomExists) { %>
                        <h5>Enter the passcode to join the room:</h5>
                        <% } else { %>
                        <h5>Enter a new passcode for this room:</h5>
                        <% } %>
                        <p>
                            <input type="text" class="form-control room-passcode-setting" id="room-passcode-setting" />
                        </p>

                        <% if (!roomExists) { %>
                        <button type="button" class="btn btn-default generate-key" id="generate-key">Generate Passcode</button>
                        <button type="button" class="btn btn-default generate-passcode" id="generate-passcode">Generate Readable Passcode</button>
                        <% } %>
                        <br/><br/>

                        <h4>Share Room:</h4>
                        <p>
                            If you wish to share this room with another person, you can send them the url below.
                            <br/><br/>
                            When they go to the url below, they will be prompted to enter the room passcode, so you will need to let them know the passcode you specified above.
                            <br/><br/>
                            <input type="text" class="form-control" id="share-url" readonly/>
                        </p>

                        <br/>
                        <div class="alert alert-danger alert-block" id="alert-error">
                            <button type="button" class="close" aria-hidden="true">&times;</button>
                            <p id="alert-error-txt">
                            </p>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" id="cancel" data-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-default connect" id="connect">Connect</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="info-modal" tabindex="-1" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">Editor Room Info</h4>
                    </div>
                    <div class="modal-body">
                        <h6>Your Username:</h6>
                        <p>
                            <div class="input-group">
                                <input id="room-username-info" type="text" class="form-control room-username-info">
                                <span class="input-group-btn">
                                    <button id="room-username-change" class="btn btn-default" type="button">Change</button>
                                </span>
                            </div>
                        </p>

                        <h6>Room ID:</h6>
                        <p>
                            <input type="text" class="form-control room-id-info" id="room-id-info" readonly/>
                        </p>
                        <h6>Room Passcode:</h6>
                        <p>
                            <input type="text" class="form-control room-passcode-info" id="room-passcode-info" readonly/>
                        </p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="users-modal" tabindex="-1" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">Connected Users</h4>
                    </div>
                    <div class="modal-body">
                        <table id="user-table" class="table table-bordered table-hover">
                            <thead>
                                <tr>
                                    <th class="col-md-1"><small>Username</small></th>
                                    <th class="col-md-2"><small>Time Connected</small></th>
                                    <th class="col-md-2"><small>Time Idle</small></th>
                                </tr>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>

                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="debug-modal" tabindex="-1" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">Editor Room Debug Info</h4>
                    </div>
                    <div class="modal-body">
                        <div class="panel panel-primary">
                            <div class="panel-body" style="min-height: 150px; max-height: 300px; overflow-y: scroll">
                                <ul class="list-group" id="status-list">
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="error-modal" tabindex="-1" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">Editor Room Error</h4>
                    </div>
                    <div class="modal-body">

                        <br>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="chat-modal" tabindex="-1" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title" id="chat-title">Chat</h4>
                    </div>
                    <div class="modal-body">
                        <div class="panel panel-primary" id="chat-panel">
                            <div class="panel-body" id="chat-panel-body">
                                <ul class="list-group" id="chat-panel-messages">          
                                </ul>
                            </div>
                            <div class="panel-footer" id="chat-panel-footer">
                                <div class="input-group">
                                    <input id="chat-panel-msg" type="text" class="form-control" placeholder="Send message">
                                    <span class="input-group-btn">
                                        <button id="chat-panel-send" class="btn btn-default" type="button">Send</button>
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>

    <!--
    <nav id="chat-panel-bar" class="navmenu navmenu-inverse navmenu-fixed-right offcanvas" role="navigation">
        <div class="panel panel-primary" id="chat-panel">
            <div class="panel-heading" id="chat-panel-heading">Chat</div>
            <div class="panel-body" id="chat-panel-body">
                <ul class="list-group" id="chat-panel-messages">          
                </ul>
            </div>
            <div class="panel-footer" id="chat-panel-footer">
                <div class="input-group">
                    <input id="chat-panel-msg" type="text" class="form-control" placeholder="Send message">
                    <span class="input-group-btn">
                        <button id="chat-panel-send" class="btn btn-default" type="button">Send</button>
                    </span>
                </div>
            </div>
        </div>
    </nav>
    -->
</body>
<input type="hidden" id="passcode" value="">
<input type="hidden" id="roomId" value="<%= roomId %>">

<script>
    $(function()
    {
        $('#alert-error').hide();

        $.notify.addStyle('grey', 
        {
            html: "<div><span data-notify-text/></div>",
            classes: {
                base: {
                "white-space": "nowrap",
                "background-color": "#B6E2FE",
                "padding": "5px",
                "color" : "#000000",
                "border" : "1px solid #000000",
                "border-radius": "4px"
                }
            },
        });

        $.notify.defaults(
        {
            globalPosition: 'bottom right',
            autoHideDelay: 2000,
        });

        $('#share-url').val(window.location.href);

        /*
        $('#settings-modal').modal(
        {
            backdrop: 'static',
            keyboard: false
        });
        */

        $('#settings-modal').modal('show');

        $('#generate-key').popover().click(function () 
        {
            setTimeout(function () {
                $('#generate-key').popover('hide');
            }, 2000);
        });

        $('#chat-button').click(function()
        {
            $('#chat-modal').modal('toggle');
        });

        $('#users-button').click(function()
        {
            var roomId = $('#roomId').val();

            $.ajax(
            {
                url: '/api/users/' + roomId,
                type: "GET",
                xhrFields: {
                    withCredentials: true
                },
                dataType: "json",
                contentType: "application/json",
                cache: false,
                timeout: 5000,
                complete: function() 
                {
                },

                success: function(data) 
                {
                    $('#user-table tbody').empty();

                    $.each(data, function(id)
                    {
                        var client = data[id];

                        $('#user-table tbody').append(`
                        <tr>
                            <td>${client.username}</td>
                            <td>${moment(client.connectedTime).local().fromNow()}</td>
                            <td>${moment(client.lastUpdateTime).local().fromNow()}</td>
                        </tr>
                        `);
                    });
                },

                error: function(jqXHR, textStatus, err)
                {
                    console.warn(jqXHR.responseJSON.message)
                    console.warn('text status '+textStatus+', err '+err)
                },
            });

             $('#users-modal').modal('toggle');
        });

        $('#info-button').click(function()
        {
            //$('#room-id-info').val($('#roomId').val());
            //$('#room-passcode-info').val($('#passcode').val());

            $('#info-modal').modal('toggle');
        });

        $('#debug-info-button').click(function()
        {
            $('#debug-modal').modal('toggle');
        });

        $('.generate-key').click(function()
        {
            generateKey();
        });

        $('.generate-passcode').click(function()
        {
            generatePasscode();
        });

        $('#cancel').click(function()
        {
            window.location.replace("/");
        });

        $('.connect').click(function()
        {
            var passcode = $('#room-passcode-setting').val();

            if (passcode && passcode.length >= 6)
            {
                $('#passcode').val(passcode);

                var roomId = $('#roomId').val();

                if (roomId && passcode)
                {
                    updateStatus(`Connecting to room ${roomId}...`);

                    connect(roomId, passcode);
                }
                else
                {
                    errorAlert('Error: Invalid room ID or passcode.');

                }
            }
            else
            {
                errorAlert('Please provide a passcode that is more than 6 characters.');
            }
        });
    });

    $('.alert .close').on('click', function(e) 
    {
        $(this).parent().hide();
    });

    function successAlert(msg)
    {
        $('#alert-success-txt').text(msg);
        $('#alert-success').show();
        $("#alert-success").fadeTo(2000, 500).slideUp(500, function()
        {
            $("#alert-success").slideUp(500);
        });
    }

    function errorAlert(msg)
    {
        $('#alert-error-txt').text(msg);
        $('#alert-error').show();
        $("#alert-error").fadeTo(2000, 500).slideUp(500, function()
        {
            $("#alert-error").slideUp(500);
        });
    }

    function generateKey()
    {
        var key = CryptoJS.lib.WordArray.random(128 / 8).toString();

        $('#room-passcode-setting').val(key);
    }

    function generatePasscode()
    {
        $('#room-passcode-setting').val(humanReadableIds.random());
    }

    function encrypt(text, key)
    {
        var e_text = CryptoJS.AES.encrypt(text, key).toString();

        return e_text;
    }

    function decrypt(text, key)
    {
        var d_text = CryptoJS.AES.decrypt(text, key).toString(CryptoJS.enc.Utf8);

        return d_text;
    }

    function updateStatus(msg)
    {
        msg = `[${moment().local().format("MM/DD/YYYY h:mm:ss a")}]: ${msg}`;

        $('#status-list').prepend($('<li class="list-group-item">').text(msg));
    }

    function notify(msg)
    {
        $.notify(msg, 
        {
            style: 'grey'
        });
    }

    function connect(roomId, passcode)
    {
        let key = ""; // store encryption key in memory
        let clientKey = null; // store DH key

        var editor = new Quill('#editor',
            {
                modules: {
                    toolbar: '#toolbar'
                },
                theme: 'snow'
            });

        var socket = io('//' + window.location.host,
            {
                query: '&roomId=' + roomId,
                reconnectionDelay : 10000,
            });

        let secret_key = null;
        socket.on('connect', function()
        {
            updateStatus(`You connected to the server.`);
        });

        socket.on('auth:exchange', function(data, ack)
        {
            var server_publickey = data.key;

            updateStatus(`Creating public key.`);

            // Generate keys for Elliptic Curve Diffie-Hellman key exchange
            clientKey = bCrypto.createECDH('secp521r1');
            clientKey.generateKeys('hex');
            var client_publickey = clientKey.getPublicKey('hex');

            secret_key = clientKey.computeSecret(server_publickey, 'hex', 'hex');

            //console.log('auth:exchange secret_key: ' + secret_key);

            updateStatus(`Sending public key.`);

            ack(
            {
                'key' : client_publickey
            });
        });

        socket.on('room:auth', function(data, ack)
        {
            updateStatus(`Initiating room authentication.`);

            // requested room passport
            ack({ 'passcode' : passcode });
        });

        socket.on('authenticated', function(data) 
        {
            var encrypted_key = data.key;
            var encrypted_passcode = data.passcode;
            var username = data.username;
            var roomId = data.roomId;

            updateStatus(`Finishing key exchange.`);

            if (!secret_key)
            {
                updateStatus(`Key exchange failed. Secret is not defined.`);

                return;
            }

            //console.log('authenticated secret_key: ' + secret_key);

            var passcode = decrypt(encrypted_passcode, secret_key);
            key = decrypt(encrypted_key, secret_key);

            if (!key)
            {
                updateStatus(`Key exchange failed. Failed to decrypt key.`);

                return;
            }

            updateStatus(`Key exchange complete.`);
            updateStatus(`You are now authenticated in room ${data.roomId}.`);

            $('#room-id-info').val(roomId);
            $('#room-passcode-info').val(passcode);
            $('#room-username-info').val(username);

            $('title').text(`${username}@${roomId} - syncpad editor`);

            // If modal is shown, toggle it to hide it.
            // This fixes an issue where on reconnect, it shows the modal
            if ($('#settings-modal').data()['bs.modal'].isShown)
                $('#settings-modal').modal('toggle');
        });

        socket.on('unauthorized', function(data) 
        {
            var msg = data.message;
            var roomId = data.roomId;

            updateStatus(`You are not authorized in room ${data.roomId}: ${msg}`);
            errorAlert(`You are not authorized in room ${data.roomId}: ${msg}`);
        });

        socket.on('connect_error', function(err)
        {
            updateStatus(`connect_error: ${err.error}`);
            errorAlert(`connect_error: ${err.error}`);
        });

        socket.on('connect_timeout', function(err)
        {
            updateStatus(`connect_timeout: ${err.error}`);
            errorAlert(`connect_timeout: ${err.error}`);
        });

        socket.on('error', function(err)
        {
            updateStatus(`Error: ${err.error}`);
            errorAlert(`Error: ${err.error}`);
        });

        socket.on('disconnect', function(err)
        {
            updateStatus(`Disconnected from server.`);
        });

        socket.on('room:join', function(data)
        {
            updateStatus(`User ${data.user} joined the room.`);
            notify(`User ${data.user} joined the room.`);
        });

        socket.on('room:leave', function(data)
        {
            updateStatus(`User ${data.user} left the room from.`);
            notify(`User ${data.user} left the room.`);
        });

        // Received request to get latest text body
        socket.on('text:latest', function(data)
        {
            var m_user = data.user;
            var m_socketId = data.id;

            var text = editor.getContents();

            var data = JSON.stringify(text);
            var e_text = encrypt(data, key);

            console.log('text:latest: ' + data);

            socket.emit('text:refresh', { 'id': m_socketId, 'text': e_text });
        });

        socket.on('text', function(data)
        {
            var m_user = data.user;
            var m_text = data.text;

            var d_text = decrypt(m_text, key);
            var data = JSON.parse(d_text);

            editor.updateContents(data, "silent");
        });

        socket.on('text:typing', function(data)
        {
 
        });

        socket.once('text:refresh', function(data)
        {
            var m_text = data.text;

            var d_text = decrypt(m_text, key);

            if (d_text)
            {
                var data = JSON.parse(d_text);

                console.log('text:refresh: ' + d_text);

                editor.setContents(data, "silent");
            }
            else
            {
                updateStatus("Editor refresh failed.")
            }
        });

        socket.on('chat:msg', function(data)
        {
            var username = data.user;
            var msg = data.message;

            // decrypt
            var text = decrypt(msg, key);

            appendChat(username, text);

            if (username !=$('#room-username-info').val())
                notify(`Message from ${username}.`);
        });

        editor.on('text-change', function(delta, oldDelta, source) 
        {
            if (source == 'user')
            {
                // Send editor delta of change instead
                var text = delta;

                var data = JSON.stringify(text);
                var e_data = encrypt(data, key);

                socket.emit('text', { 'text': e_data })
            }
        });

        editor.on('selection-change', function(range ,oldRange, source)
        {
            if (range)
            {
                socket.emit('text:typing');
            }
        });

        //
        // Chat

        // Change username
        $('#room-username-change').click(function()
        {
            var username = $('#room-username-info').val();

            if (username)
            {
                socket.emit('chat:name change', 
                { 'username' : username }, 
                function(err, data)
                {
                    if (err)
                    {
                        console.log("username already exists in room.");

                        // Reset modal value
                        $('#room-username-info').val(data.username);
                    }
                    else
                    {
                        $('#room-username-info').val(data.username);

                        $('title').text(`${data.username}@${roomId} - syncpad editor`);
                        
                    }
                    
                });
            }
        });

        $('#chat-panel-send').click(function()
        {   
            sendMessage();
        });

        $('#chat-panel-msg').on("keydown", function(event)
        {
            if (event.which == 13)
            {
                sendMessage();
            }
        });

        function sendMessage()
        {
            var msg = $('#chat-panel-msg').val();

            if (!msg)
                return;

            var encrypted_msg = encrypt(msg, key);

            socket.emit('chat:msg', { 'message' : encrypted_msg });

            $('#chat-panel-msg').val("");
        }
        function appendChat(username, msg)
        {
            msg = sanitizeHtml(msg);

            var text = 
                `<p class="list-group-item-heading"><p style="font-size: 15px; color: #1ac6ff">${username}</p></p>
                <p class="list-group-item-text" style="text-align: left; ">${msg} <span style="float: right; font-size: 9px; color: #B0B0B0">${moment().local().format("h:mm:ss a")}</span></p>`;

            $('#chat-panel-messages').append($('<li class="list-group-item">').html(text));

            $("#chat-panel-body").scrollTop($("#chat-panel-body")[0].scrollHeight);
        }
    }
</script>

</html>