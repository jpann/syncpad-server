<!doctype html>
<html>

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Editor</title>
    <style>
        html {
            height: 100%;
            width: 100%;
        }

        body {
            font: 10px Helvetica, Arial;
            margin: 0;
            height: 100%;
            width: 100%;
        }

        #container {
            height: 90%;
            width: 100%;
        }

        #toolbar {
            border-bottom: 1px solid #E8E8E8;
            background-color: #F5F5F5;
            min-height: 35px;
            max-height: 35px;
            height: 35px;
            padding: 4px;
        }

        #editor {
            background-color: #FFFFFF;
            height: calc(100% - 35px);
            width: 100%;
        }

        .qt-toolbar.qt-snow {
            padding: 4px;
        }
    </style>
    <script src="/js/jquery-3.2.1.min.js"></script>

    <script src="/js/jquery.validate.js"></script>
    <script src="/js/additional-methods.js"></script>
    <script src="/js/bootstrap.min.js"></script>

    <script src="/js/cryptojslib/rollups/aes.js"></script>
    <script src="/js/cryptojslib/rollups/pbkdf2.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.7.4/socket.io.js" integrity="sha256-lDaoGuONbVHFEV6ZW3GowBu4ECOTjDE14hleNVBvDW8="
        crossorigin="anonymous"></script>
    <script src="/js/quill.js"></script>
    <script src="/js/moment.js"></script>
    <link rel="stylesheet" href="/css/quill.snow.css">

    <link rel="stylesheet" href="/css/bootstrap.min.css">
</head>

<body>
    <%- include('../partials/header', {user: user}) %>

        <div class="container">
            <div id="toolbar">
                <button id="debug-info-button" class="glyphicon glyphicon glyphicon-eye-open" data-toggle="tooltip" data-placement="top" title="Debug Info"></button>
                <button id="info-button" class="glyphicon glyphicon glyphicon glyphicon-info-sign" data-toggle="tooltip" data-placement="top" title="Editor Info"></button>
                <button id="users-button" class="glyphicon glyphicon glyphicon glyphicon glyphicon-user" data-toggle="tooltip" data-placement="top" title="Users"></button>

                <select class="ql-size">
                    <option value="huge"></option>
                    <option value="large"></option>
                    <option selected></option>
                    <option value="small"></option>
                </select>
                <button class="ql-bold"></button>
                <button class="ql-italic"></button>
                <button class="ql-underline"></button>
                <button class="ql-code-block" value="sub"></button>
            </div>
            <div id="editor"></div>
            <br/><br/>
        </div>

        <div class="modal fade" id="settings-modal" tabindex="-1" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">Editor Room Settings</h4>
                    </div>
                    <div class="modal-body">
                        <h6>Enter encryption key you will use for transmissions in this editor:</h6>
                        <p>
                            <input type="text" class="form-control encryption-key-text" id="encryption-key-text" />
                        </p>
                        <button type="button" class="btn btn-default generate-key" id="generate-key">Generate Key</button>
                        <br/><br/>

                        <h6>You can share this editor by providing the link below.
                        <br/><br/>
                        <b>Users joining this room will need to enter the encryption key you are using above.</b>
                        </h6>
                        <p>
                            <input type="text" class="form-control" id="share-url" readonly/>
                        </p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" id="cancel" data-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-default connect" id="connect">Connect</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="info-modal" tabindex="-1" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">Editor Room Info</h4>
                    </div>
                    <div class="modal-body">
                        <h6>Room ID:</h6>
                        <p>
                            <input type="text" class="form-control roomId-text" id="roomId-text" readonly/>
                        </p>
                        <h6>Encryption Key:</h6>
                        <p>
                            <input type="text" class="form-control" id="encryption-key" readonly/>
                        </p>
                        <br>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="users-modal" tabindex="-1" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">Connected Users</h4>
                    </div>
                    <div class="modal-body">
                        <table id="user-table" class="table table-bordered table-hover">
                            <thead>
                                <tr>
                                    <th class="col-md-1"><small>Username</small></th>
                                    <th class="col-md-2"><small>Time Connected</small></th>
                                    <th class="col-md-2"><small>Time Idle</small></th>
                                    <th class="col-md-4"><small>Remote Address</small></th>
                                </tr>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>

                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="debug-modal" tabindex="-1" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">Editor Room Debug Info</h4>
                    </div>
                    <div class="modal-body">
                        <div class="panel panel-primary">
                            <div class="panel-body" style="min-height: 150px; max-height: 300px; overflow-y: scroll">
                                <ul class="list-group" id="status-list">
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="error-modal" tabindex="-1" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">Editor Room Error</h4>
                    </div>
                    <div class="modal-body">

                        <br>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
        </div>
</body>
<input type="hidden" id="key" value="">
<input type="hidden" id="roomId" value="<%= roomId %>">
<input type="hidden" id="sid" value="<%= sid %>">

<script>
    $('document').ready(function()
    {
        
    });

    $(function()
    {
        $('#share-url').val(window.location.href);
        $('#settings-modal').modal('show');

        $('#users-button').click(function()
        {
            var roomId = $('#roomId').val();

            $.ajax(
            {
                url: '/api/users/' + roomId,
                type: "GET",
                xhrFields: {
                    withCredentials: true
                },
                dataType: "json",
                contentType: "application/json",
                cache: false,
                timeout: 5000,
                complete: function() 
                {
                },

                success: function(data) 
                {
                    console.log(data);
                    
                    $('#user-table tbody').empty();

                    $.each(data, function(id)
                    {
                        var client = data[id];

                        $('#user-table tbody').append(`
                        <tr>
                            <td><a href="/profile/${client.user_id}">${client.username}</a></td>
                            <td>${moment(client.connectedTime, "YYYY MM DD, h:mm:ss a").fromNow()}</td>
                            <td>${moment(client.lastUpdateTime, "YYYY MM DD, h:mm:ss a").fromNow()}</td>
                            <td>${client.remoteAddress}</td>
                        </tr>
                        `);
                    });
                },

                error: function(jqXHR, textStatus, err)
                {
                    console.warn(jqXHR.responseJSON.message)
                    console.warn('text status '+textStatus+', err '+err)
                },
            });

             $('#users-modal').modal('toggle');
        });

        $('#info-button').click(function()
        {
            $('#roomId-text').val($('#roomId').val());
            $('#encryption-key').val($('#key').val());

            $('#info-modal').modal('toggle');
        });

        $('#debug-info-button').click(function()
        {
            $('#debug-modal').modal('toggle');
        });

        $('.generate-key').click(function()
        {
            generateKey();
        });

        $('#cancel').click(function()
        {
            window.location.replace("/");
        });

        $('.connect').click(function()
        {
            var key = $('.encryption-key-text').val();

            if (key)
            {
                $('#key').val(key);

                $('#settings-modal').modal('toggle');

                var sid = $('#sid').val();
                var roomId = $('#roomId').val();

                console.log(`Connect.click - Sid: ${sid}; RoomID: ${roomId}; key: ${key}`);

                if (sid && roomId && key)
                {
                    //TODO Connect
                    console.log("connecting...");

                    updateStatus(`Connecting to room ${roomId}...`);
                    connect(sid, roomId, key);
                }
                else
                {
                    console.log("no sid, room id, or key")
                }
            }
        });

        $('.alert .close').on('click', function(e) 
        {
            $(this).parent().hide();
        });

        function successAlert(msg)
        {
            $('#alert-success-txt').text(msg);
            $('#alert-success').show();
            $("#alert-success").fadeTo(2000, 500).slideUp(500, function()
            {
                $("#alert-success").slideUp(500);
            });
        }
        function errorAlert(msg)
        {
            $('#alert-error-txt').text(msg);
            $('#alert-error').show();
            $("#alert-error").fadeTo(2000, 500).slideUp(500, function()
            {
                $("#alert-error").slideUp(500);
            });
        }
    });

    function generateKey()
    {
        var key = CryptoJS.lib.WordArray.random(128 / 8).toString();

        $('#encryption-key-text').val(key);
    }

    function encrypt(text, key)
    {
        var e_text = CryptoJS.AES.encrypt(text, key).toString();

        return e_text;
    }

    function decrypt(text, key)
    {
        var d_text = CryptoJS.AES.decrypt(text, key).toString(CryptoJS.enc.Utf8);

        return d_text;
    }

    function updateStatus(msg)
    {
        msg = `[${moment().format("MM/DD/YYYY h:mm:ss a")}]: ${msg}`;

        $('#status-list').prepend($('<li class="list-group-item">').text(msg));;
    }

    function connect(sid, roomId, key)
    {
        console.log(`Connect - Sid: ${sid}; RoomID: ${roomId}; key: ${key}`);

        var editor = new Quill('#editor',
            {
                modules: {
                    toolbar: '#toolbar'
                },
                theme: 'snow'
            });

        var socket = io('//' + window.location.host,
            {
                query: 'session_id=' + sid + '&roomId=' + roomId
            });

        socket.on('connect', function()
        {
            console.log('socket:connect: ' + sid + '; roomId: ' + roomId);

            updateStatus(`You connected successfully to room ${roomId}!`);

            socket.on('authenticated', function(data) 
            {
                console.log('socket:authenticated');

                updateStatus(`You are now authenticated in room ${data.roomId}.`);
            });

            socket.on('connect_error', function(err)
            {
                console.log('socket:error:connection: ' + err.message);

                updateStatus(`connect_error: ${err.message}`);
            });

            socket.on('connect_timeout', function(err)
            {
                console.log('socket:error:timeout: ' + err.message);

                updateStatus(`connect_timeout: ${err.message}`);
            });

            socket.on('error', function(err)
            {
                console.log('socket:error: ' + err.message);

                updateStatus(`Error: ${err.message}`);
            });

            socket.on('disconnect', function(err)
            {
                console.log('Socket - Disconnected: ' + JSON.stringify(err));

                updateStatus(`disconnect: ${err.message}`);
            });

            socket.on('room:join', function(data)
            {
                console.log('room:join ' + JSON.stringify(data));

                updateStatus(`User ${data.user} joined the room from '${data.address}'.`);
            });

            socket.on('room:leave', function(data)
            {
                console.log('room:leave ' + JSON.stringify(data));

                updateStatus(`User ${data.user} left the room from '${data.address}'.`);
            });

            // Received request to get latest text body
            socket.on('text:latest', function(data)
            {
                var m_user = data.user;
                var m_address = data.address;
                var m_socketId = data.id;

                var text = editor.getContents();
                //console.log(JSON.stringify(text));

                //TODO Encrypt
                var data = JSON.stringify(text);
                var e_text = encrypt(data, key);

                socket.emit('text:refresh', { 'id': m_socketId, 'text': e_text });
            });

            socket.on('text', function(data)
            {
                var m_user = data.user;
                var m_text = data.text;
                var m_address = data.address;
                var m_encrypted = data.encrypted;
                var m_hostname = data.hostname;

                //console.log("socket - text: " + JSON.stringify(data));

                //TODO decrypt
                var d_text = decrypt(m_text, key);
                var data = JSON.parse(d_text);

                editor.updateContents(data, "silent");
            });

            socket.on('text:typing', function(data)
            {
                console.log("socket - text:typing - " + data.hostname);
            });

            socket.once('text:refresh', function(data)
            {

                var m_text = data.text;
                var m_hostname = data.hostname;

                // TODO Decrypt
                var d_text = decrypt(m_text, key);

                if (d_text)
                {
                    var data = JSON.parse(d_text);

                    editor.updateContents(data, "silent");
                }
                else
                {
                    console.log("socket - text:refresh: failed parsing json")
                }

            });
        });

        editor.on('text-change', function(delta, oldDelta, source) 
        {
            if (source == 'user')
            {
                // Send editor delta of change instead
                var text = delta;

                var data = JSON.stringify(text);
                var e_data = encrypt(data, key);

                //console.log(`text-change: ${data} - e_data: ${e_data}`);

                socket.emit('text', { 'text': e_data, 'encrypted': true, 'hostname': 'web' })
            }
        });
    }

</script>

</html>