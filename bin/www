#!/usr/bin/env node

require('dotenv').config();

const PORT = process.env.PORT || 3000;
const USE_SSL = process.env.USE_SSL || 'N';
const SSL_KEY = process.env.SSL_KEY || './certs/syncpad.pem';
const SSL_CERT = process.env.SSL_CERT || './certs/syncpad.crt';

var sockets = require('../socketServer')
var app = require('../app');

var debug = require('debug')('test-server:server');
var http = require('http');
var https = require('https');

if (USE_SSL == 'Y')
{
    var options = 
    {
        key : fs.readFileSync(SSL_KEY),
        cert : fs.readFileSync(SSL_CERT),
        rejectUnauthorized: false
    };

    server = https.createServer(options, app);
}
else
{
    server = http.createServer(app);
}

var port = normalizePort(PORT);
app.set('port', port);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var io = sockets.init(server);
app.set('socketio', io);

function normalizePort(val)
{
    var port = parseInt(val, 10);

    if (isNaN(port))
    {
        // named pipe
        return val;
    }

    if (port >= 0)
    {
        // port number
        return port;
    }

    return false;
}

function onError(error)
{
    if (error.syscall !== 'listen')
    {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code)
    {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onListening()
{
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
    console.log('Listening on *:' + addr.port);
}
